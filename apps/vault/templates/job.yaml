apiVersion: batch/v1
kind: Job
metadata:
  name: vault-init
  annotations:
    "helm.sh/hook": post-install
spec:
  template:
    spec:
      serviceAccountName: vault-init
      containers:
      - name: vault-init
        image: ghcr.io/ungarscool1/infrastructure/vault-init:latest
        imagePullPolicy: IfNotPresent
        envFrom:
        - secretRef:
            name: hcp-vault-auth
        command:
        - sh
        - -c
        - |
          if [ -z "$clientID" ] || [ -z "$clientSecret" ]; then
            echo "clientID or clientSecret is not set"
            exit 1
          fi
          while ! curl http://vault.{{.Release.Namespace}}.svc.cluster.local:8200/; do
            echo "Waiting for vault to be ready"
            sleep 2
          done
          if ! curl http://vault.{{.Release.Namespace}}.svc.cluster.local:8200/v1/sys/health | jq -e '.initialized' | grep -q false; then
                echo "Vault is already initialized"
                exit 0
              fi
          hcp auth login --client-id=$clientID --client-secret=$clientSecret
          curl -X POST -H "Content-Type: application/json" -d '{"secret_shares": {{ .Values.init.key_shares }},"secret_threshold": {{ .Values.init.key_threshold }}}' http://vault.{{.Release.Namespace}}.svc.cluster.local:8200/v1/sys/init > /tmp/init.json
          unseal_keys=$(jq -r '.keys[]' /tmp/init.json)
          root_token=$(jq -r '.root_token' /tmp/init.json)
          index=0
          for key in $unseal_keys; do
            echo $key | hcp vault-secrets secrets create recovery_key$index --app vault --data-file=-
            curl -X POST -H "Content-Type: application/json" -d '{"key": "'$key'"}' http://vault.{{.Release.Namespace}}.svc.cluster.local:8200/v1/sys/unseal
            index=$((index+1))
          done
          echo $root_token | hcp vault-secrets secrets create root_token --app vault --data-file=-
          kubectl create secret generic vault-root-token --from-literal=root_token=$root_token
          echo "Vault initialized and unsealed"
          {{- if .Values.init.engine }}
          echo "Create {{ .Values.init.engine.name }} ({{ .Values.init.engine.type }}) engine"
          curl 'http://vault.{{.Release.Namespace}}.svc.cluster.local:8200/v1/sys/mounts/{{ .Values.init.engine.name }}' \
          -H "x-vault-token: $root_token" \
          --data-raw '{"path":"{{ .Values.init.engine.name }}","type":"{{ .Values.init.engine.type }}","generate_signing_key":true,"config":{"max_lease_ttl":0,"listing_visibility":"hidden","id":"{{ .Values.init.engine.name }}"},"options":{"version":{{ .Values.init.engine.version }}},"id":"{{ .Values.init.engine.name }}"}'
          {{- end }}
      restartPolicy: Never
  backoffLimit: 0
